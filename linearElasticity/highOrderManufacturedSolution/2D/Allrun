#!/bin/bash

# Source required functions
. $WM_PROJECT_DIR/bin/tools/RunFunctions
source solids4FoamScripts.sh

# Working only with .com version
solids4Foam::caseDoesNotRunWithFoamExtend
solids4Foam::caseDoesNotRunWithOpenFOAMOrg

# Compile the manucafturedSolution library
(cd  manufacturedSolution && ./Allwmake -j -s)

# Define configurations as space-separated strings
configs=(
    "BASE=base/snes NAME=tet.unstruct_v2.hypre-snes GMSH_FILE=tet-unstructured_v2 USE_PERTURBMESHPOINTS=0 PETSC_FILE=petscOptions.hypre"
    "BASE=base/snes NAME=tet.unstruct_v1.hypre-snes GMSH_FILE=tet-unstructured_v1 USE_PERTURBMESHPOINTS=0 PETSC_FILE=petscOptions.hypre"
    "BASE=base/snes NAME=hex.struct.hypre-snes GMSH_FILE=hex-structured USE_PERTURBMESHPOINTS=0 PETSC_FILE=petscOptions.hypre"
    "BASE=base/snes NAME=tet.struct.hypre-snes GMSH_FILE=tet-structured USE_PERTURBMESHPOINTS=0 PETSC_FILE=petscOptions.hypre"
    "BASE=base/segregated NAME=hex.struct.seg GMSH_FILE=hex-structured USE_PERTURBMESHPOINTS=0"
    "BASE=base/segregated NAME=tet.struct.seg GMSH_FILE=tet-structured USE_PERTURBMESHPOINTS=0"
    "BASE=base/segregated NAME=tet.unstruct_v1.seg GMSH_FILE=tet-unstructured_v1 USE_PERTURBMESHPOINTS=0"
    "BASE=base/segregated NAME=tet.unstruct_v2.seg GMSH_FILE=tet-unstructured_v2 USE_PERTURBMESHPOINTS=0"
    "BASE=base/highOrder NAME=hex.struct.ho.N1 GMSH_FILE=hex-structured USE_PERTURBMESHPOINTS=0 N=1 NLAYERS=3"
    "BASE=base/highOrder NAME=hex.struct.ho.N2 GMSH_FILE=hex-structured USE_PERTURBMESHPOINTS=0 N=2 NLAYERS=3"
    "BASE=base/highOrder NAME=hex.struct.ho.N3 GMSH_FILE=hex-structured USE_PERTURBMESHPOINTS=0 N=3 NLAYERS=4"
    "BASE=base/highOrder NAME=tet.struct.ho.N1 GMSH_FILE=tet-structured USE_PERTURBMESHPOINTS=0 N=1 NLAYERS=3"
    "BASE=base/highOrder NAME=tet.struct.ho.N2 GMSH_FILE=tet-structured USE_PERTURBMESHPOINTS=0 N=2 NLAYERS=4"
    "BASE=base/highOrder NAME=tet.struct.ho.N3 GMSH_FILE=tet-structured USE_PERTURBMESHPOINTS=0 N=3 NLAYERS=5"
    "BASE=base/highOrder NAME=tet.unstruct_v1.ho.N1 GMSH_FILE=tet-unstructured_v1 USE_PERTURBMESHPOINTS=0 N=1 NLAYERS=3"
    "BASE=base/highOrder NAME=tet.unstruct_v1.ho.N2 GMSH_FILE=tet-unstructured_v1 USE_PERTURBMESHPOINTS=0 N=2 NLAYERS=4"
    "BASE=base/highOrder NAME=tet.unstruct_v1.ho.N3 GMSH_FILE=tet-unstructured_v1 USE_PERTURBMESHPOINTS=0 N=3 NLAYERS=5"
)

# SNES segregated approach
#    "BASE=base/snes NAME=hex.struct.hypre-snes-seg GMSH_FILE=hex-structured USE_PERTURBMESHPOINTS=0 PETSC_FILE=petscOptions.seg.hypre"
#    "BASE=base/snes NAME=tet.struct.hypre-snes-seg GMSH_FILE=tet-structured USE_PERTURBMESHPOINTS=0 PETSC_FILE=petscOptions.seg.hypre"
#    "BASE=base/snes NAME=tet.unstruct.hypre-snes-seg GMSH_FILE=tet-unstructured USE_PERTURBMESHPOINTS=0 PETSC_FILE=petscOptions.seg.hypre"

# Define start and end mesh indices
# Mesh input files are defined from 1 to 6
# END_MESH should be greater than START_MESH
START_MESH=1
END_MESH=32


# Detect the CPU type: we append this to the case name
if [[ "$OSTYPE" == "darwin"* ]]
then
    # macOS
    CPU_TYPE=$(sysctl -n machdep.cpu.brand_string | sed 's/[^a-zA-Z0-9]/_/g')
elif [[ -f /proc/cpuinfo ]]
then
    # Linux
    CPU_TYPE=$(grep -m 1 "model name" /proc/cpuinfo | awk -F': ' '{print $2}' | sed 's/[^a-zA-Z0-9]/_/g')
else
    # Fallback if neither method works
    CPU_TYPE="Unknown_CPU"
fi


# Create timestamped working directory for this run
DATE=$(date +%Y-%m-%d_%H-%M-%S)
RUN_DIR="run_${CPU_TYPE}_${DATE}"
echo "Creating ${RUN_DIR}"
mkdir "${RUN_DIR}"

# Enter the run directory
cd "${RUN_DIR}"

# Iterate through configurations
for config in "${configs[@]}"
do
    # Parse the configuration string
    eval $config
    echo; echo "***************************************"
    echo "Running configuration: $config"
    echo "***************************************"

    # Define results summary file name
    SUMMARY="${NAME}.summary.txt"
    echo "# Mesh Time Mem CellsNumber D_L2 D_Linf S_L2 S_Linf" > "${SUMMARY}"

    # Loop over mesh densities in each configuration
    for i in `seq $START_MESH $END_MESH`
    do
        CASE="${NAME}.$i"
        echo; echo "Processing case: $CASE"

        # Prepare the case
        cp -r "../${BASE}" "${CASE}"
        cd "$CASE"

        # GMSH Mesh generation
        cp "gmsh/meshSpacing/meshSpacing$i.geo" "gmsh/meshSpacing/meshSpacing.geo"
        solids4Foam::runApplication gmsh -3 -format msh2 gmsh/"${GMSH_FILE}.geo"
        solids4Foam::runApplication gmshToFoam gmsh/"${GMSH_FILE}.msh"
        solids4Foam::runApplication changeDictionary

        # Optional mesh distortion
        if [ "$USE_PERTURBMESHPOINTS" -eq 1 ]
        then
            solids4Foam::runApplication perturbMeshPoints
        fi
        solids4Foam::runApplication checkMesh

        # Update the PETSc options file
        if [ -n "${PETSC_FILE}" ]; then
            sed -i "/^\s*optionsFile /s|^.*|    optionsFile ${PETSC_FILE};|" constant/solidProperties
        fi

	# Update the order in the LRECoeffs
	if [ -n "${N}" ]; then
            sed -i "/^\s*N /s|^.*|            N ${N};|" constant/solidProperties
	fi

	# Update number of layers in the LRECoeffs
	if [ -n "${NLAYERS}" ]; then
            sed -i "/^\s*nLayers /s|^.*|            nLayers ${NLAYERS};|" constant/solidProperties
	fi

        # Run the solver
        # If "gtime" is available (could be called "time" on Linux), use it to
        # record the max memory usage
        if command -v gtime &> /dev/null
        then
            echo "Running solids4Foam on ${CASE} with gtime"
            gtime -f "Maximum resident set size (kbytes): %M" mpirun -np 1 solids4Foam &> log.solids4Foam
        elif command -v time &> /dev/null
        then
            echo "Running solids4Foam on ${CASE} with time"
            gtime -f "Maximum resident set size (kbytes): %M" mpirun -np 1 solids4Foam &> log.solids4Foam
        else
            echo "Running solids4Foam on ${CASE}"
            # Strange PETSc issue on Macbook where I need to use mpirun for serial
            #solids4Foam::runApplication solids4Foam
            mpirun -np 1 solids4Foam &> log.solids4Foam
        fi

        # Extract results from solver log and append them to a summary file
        echo; echo "Appending results to ${SUMMARY}"
        if grep -q "Maximum resident" log.solids4Foam; then
            MAX_MEMORY=$(grep "Maximum resident" log.solids4Foam | awk '{print int($6 / 1000)}')
        else
            MAX_MEMORY="NaN"
        fi

        # Record the time
        CLOCK_TIME=$(grep "ClockTime" log.solids4Foam | awk '{print $7}')

	# Number of cells
	CELLS=$(grep "cells:" log.checkMesh | awk '{print $2}')

        # Extract the L2 (average) error for displacement
        DISP_L2_ERROR=$(grep "Writing DDifference field" -A 2 log.solids4Foam | tail -1 | awk '{print $3}')

        # Extract the LInfinity (max) error for displacement
        DISP_LINF_ERROR=$(grep "Writing DDifference field" -A 2 log.solids4Foam | tail -1 | awk '{print $4}')

        # Extract the L2 (average) error for mag(sigma)
        STRESS_L2_ERROR=$(grep "Writing sigmaDifference field" -A 2 log.solids4Foam | tail -1 | awk '{print $3}')

        # Extract the LInfinity (max) error for mag(sigma)
        STRESS_LINF_ERROR=$(grep "Writing sigmaDifference field" -A 2 log.solids4Foam | tail -1 | awk '{print $4}')

        # Write data to file
        echo "$i $CLOCK_TIME $MAX_MEMORY $CELLS $DISP_L2_ERROR $DISP_LINF_ERROR $STRESS_L2_ERROR $STRESS_LINF_ERROR" >> ../"${SUMMARY}"

        cd ..
    done

    # Print summary file
    echo; echo "${SUMMARY} file:"; cat "${SUMMARY}"; echo

    # Calculate the order of accuracy from the summary file
    #ORDER="${NAME}.orderOfAccuracy.txt"
    #echo; echo "Creating ${ORDER} file"
    #echo "# Mesh OrderOfAccuracyDisp OrderOfAccuracyStress" > "${ORDER}"
    #awk 'NR > 2 {print NR-2, log(prev4/$4)/log(2), log(prev5/$5)/log(2), log(prev6/$6)/log(2), log(prev7/$7)/log(2)} {prev4=$4; prev5=$5; prev6=$6; prev7=$7}' "${SUMMARY}" >> "${ORDER}"
    #cat "${ORDER}"
done

# Create plots if gnuplot in installed
if command -v gnuplot &>/dev/null
then
    # Copy gnuplot scripts
    cp ../plotScripts/*gnuplot .

    # Run all scripts
    for f in *gnuplot
    do
        echo "Running gnuplot on $f"
        gnuplot "$f"
    done
fi

# Extract comparison of JFNK and segregated for the hex meshes
# if [[ -f hex.hypre.summary.txt && -f hex.seg.summary.txt ]]
# then
#     # Define input files
#     FILE1="hex.hypre.summary.txt"
#     FILE2="hex.seg.summary.txt"
#     OUTPUT="tableJFNKvsSeg_mms.tex"

#     # Define mesh sizes for the rows in the table
#     MESH_SIZES=("125" "\$1\,000\$" "\$8\,000\$" "\$64\,000\$" "\$512\,000\$" "\$4\,096\,000\$")

#     # Extract columns and write to the output file
#     {
#         for i in $(seq 1 $((${#MESH_SIZES[@]})))
#         do
#             # Extract columns 2 and 3 from each file
#             F1C2=$(awk "NR==$((i + 1)) {print \$2}" "$FILE1")
#             F1C3=$(awk "NR==$((i + 1)) {print \$3}" "$FILE1")
#             F2C2=$(awk "NR==$((i + 1)) {print \$2}" "$FILE2")
#             F2C3=$(awk "NR==$((i + 1)) {print \$3}" "$FILE2")

#             if [[ i -eq 1 ]]
#             then
#                 echo -e "\t\\\textbf{MMS}\t\t& ${MESH_SIZES[i-1]}\t& $F1C2 & $F1C3 & $F2C2 & $F2C3 \\\\\\"
#             elif [[ i -eq 2 ]]
#             then
#                 echo -e "\t\\emph{regular hex}\t& ${MESH_SIZES[i-1]}\t& $F1C2 & $F1C3 & $F2C2 & $F2C3 \\\\\\"
#             elif [[ i -eq 3 ]]
#             then
#                 echo -e "\t\\emph{3-D, static}\t& ${MESH_SIZES[i-1]}\t& $F1C2 & $F1C3 & $F2C2 & $F2C3 \\\\\\"
#             elif [[ i -eq 4 ]]
#             then
#                 echo -e "\t\\emph{linear elastic}\t& ${MESH_SIZES[i-1]}\t& $F1C2 & $F1C3 & $F2C2 & $F2C3 \\\\\\"
#             else
#                 echo -e "\t\t\t\t& ${MESH_SIZES[i-1]}\t& $F1C2 & $F1C3 & $F2C2 & $F2C3 \\\\\\"
#             fi
#         done
#     } > "$OUTPUT"

#     echo -e "\hline" >> "$OUTPUT"

#     echo; echo "Table generated in $OUTPUT"
# fi

# # Exit the run directory
# cd ..

echo; echo; echo "Done!"; echo
echo "View the PDF files in ${RUN_DIR}"
echo; echo $(date)
echo; echo
