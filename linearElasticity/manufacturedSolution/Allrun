#!/bin/bash

# Source required functions
. $WM_PROJECT_DIR/bin/tools/RunFunctions
source solids4FoamScripts.sh

# Define configurations as space-separated strings
configs=(
    "BASE=base/snes NAME=hex.hypre USE_GMSH=0 USE_DUALMESH=0 USE_PERTURBMESHPOINTS=0 PETSC_FILE=petscOptions.hypre"
    "BASE=base/snes NAME=tet.hypre USE_GMSH=1 USE_DUALMESH=0 USE_PERTURBMESHPOINTS=0 PETSC_FILE=petscOptions.hypre"
    "BASE=base/snes NAME=poly.hypre USE_GMSH=1 USE_DUALMESH=1 USE_PERTURBMESHPOINTS=0 PETSC_FILE=petscOptions.hypre"
    "BASE=base/snes NAME=distHex.hypre USE_GMSH=0 USE_DUALMESH=0 USE_PERTURBMESHPOINTS=1 PETSC_FILE=petscOptions.hypre"
    "BASE=base/snes NAME=hex.seg.hypre USE_GMSH=0 USE_DUALMESH=0 USE_PERTURBMESHPOINTS=0 PETSC_FILE=petscOptions.seg.hypre"
)

# Define start and end mesh indices
# Mesh input files are defined from 1 to 6
START_MESH=1
END_MESH=3


# Detect the CPU type: we append this to the case name
if [[ "$OSTYPE" == "darwin"* ]]
then
    # macOS
    CPU_TYPE=$(sysctl -n machdep.cpu.brand_string | sed 's/[^a-zA-Z0-9]/_/g')
elif [[ -f /proc/cpuinfo ]]
then
    # Linux
    CPU_TYPE=$(grep -m 1 "model name" /proc/cpuinfo | awk -F': ' '{print $2}' | sed 's/[^a-zA-Z0-9]/_/g')
else
    # Fallback if neither method works
    CPU_TYPE="Unknown_CPU"
fi


# Create timestamped working directory for this run
DATE=$(date +%Y%m%d_%H%M%S)
RUN_DIR="run.${CPU_TYPE}.${DATE}"
echo "Creating ${RUN_DIR}"
mkdir "${RUN_DIR}"

# Enter the run directory
cd "${RUN_DIR}"

# Iterate through configurations
for config in "${configs[@]}"
do
    # Parse the configuration string
    eval $config
    echo; echo "***************************************"
    echo "Running configuration: $config"
    echo "***************************************"

    # Define results summary file name
    SUMMARY="${NAME}.${CPU_TYPE}.summary.txt"
    echo "# Mesh Time Mem D_L2 D_Linf S_L2 S_Linf" > "${SUMMARY}"

    # Loop over mesh densities in each configuration
    for i in `seq $START_MESH $END_MESH`
    do
        CASE="${NAME}.$i"
        echo; echo "Processing case: $CASE"

        # Prepare the case
        cp -r "../${BASE}" "${CASE}"
        cd "$CASE"

        # Mesh generation logic
        if [ "$USE_GMSH" -eq 1 ]
        then
            # GMSH-specific operations
            cp "gmsh/meshSpacing$i.geo" "gmsh/meshSpacing.geo"
            solids4Foam::runApplication gmsh -3 -format msh2 gmsh/cube.geo
            solids4Foam::runApplication gmshToFoam gmsh/cube.msh
            solids4Foam::runApplication createPatch -overwrite
            if [ "$USE_DUALMESH" -eq 1 ]; then
                solids4Foam::runApplication polyDualMesh 30 -overwrite
                solids4Foam::runApplication combinePatchFaces 45 -overwrite
            fi
        else
            # blockMesh-specific operations
            cp "system/blockMeshDict.$i" "system/blockMeshDict"
            solids4Foam::runApplication blockMesh
        fi

        # Optional mesh distortion
        if [ "$USE_PERTURBMESHPOINTS" -eq 1 ]
        then
            solids4Foam::runApplication perturbMeshPoints
        fi

        # Update the PETSc options file
        if [ -n "${PETSC_FILE}" ]; then
            sed -i "/^\s*optionsFile /s|^.*|    optionsFile ${PETSC_FILE};|" constant/solidProperties
        fi

        # Run the solver
        # If "gtime" is available (could be called "time" on Linux), use it to
        # record the max memory usage
        if command -v gtime &> /dev/null
        then
            echo "Running solids4Foam on ${CASE} with gtime"
            gtime -f "Maximum resident set size (kbytes): %M" mpirun -np 1 solids4Foam &> log.solids4Foam
        elif command -v time &> /dev/null
        then
            echo "Running solids4Foam on ${CASE} with time"
            gtime -f "Maximum resident set size (kbytes): %M" mpirun -np 1 solids4Foam &> log.solids4Foam
        else
            echo "Running solids4Foam on ${CASE}"
            # Strange PETSc issue on Macbook where I need to use mpirun for serial
            #solids4Foam::runApplication solids4Foam
            mpirun -np 1 solids4Foam &> log.solids4Foam
        fi

        # Extract results from solver log and append them to a summary file
        echo; echo "Appending results to ${SUMMARY}"
        if grep -q "Maximum resident" log.solids4Foam; then
            MAX_MEMORY=$(grep "Maximum resident" log.solids4Foam | awk '{print int($6 / 1000)}')
        else
            MAX_MEMORY="NaN"
        fi

        # Record the time
        CLOCK_TIME=$(grep "ClockTime" log.solids4Foam | awk '{print $7}')

        # Extract the L2 (average) error for displacement
        DISP_L2_ERROR=$(grep "Writing DDifference field" -A 2 log.solids4Foam | tail -1 | awk '{print $3}')

        # Extract the LInfinity (max) error for displacement
        DISP_LINF_ERROR=$(grep "Writing DDifference field" -A 2 log.solids4Foam | tail -1 | awk '{print $4}')

        # Extract the L2 (average) error for mag(sigma)
        STRESS_L2_ERROR=$(grep "Writing sigmaDifference field" -A 2 log.solids4Foam | tail -1 | awk '{print $3}')

        # Extract the LInfinity (max) error for mag(sigma)
        STRESS_LINF_ERROR=$(grep "Writing sigmaDifference field" -A 2 log.solids4Foam | tail -1 | awk '{print $4}')

        # Write data to file
        echo "$i $CLOCK_TIME $MAX_MEMORY $DISP_L2_ERROR $DISP_LINF_ERROR $STRESS_L2_ERROR $STRESS_LINF_ERROR" >> ../"${SUMMARY}"

        cd ..
    done

    # Print summary file
    echo; echo "${SUMMARY} file:"; cat "${SUMMARY}"; echo

    # Calculate the order of accuracy from the summary file
    ORDER="${NAME}.${CPU_TYPE}.orderOfAccuracy.txt"
    echo; echo "Creating ${ORDER} file"
    echo "# Mesh OrderOfAccuracyDisp OrderOfAccuracyStress" > "${ORDER}"
    awk 'NR > 2 {print NR-2, log(prev4/$4)/log(2), log(prev5/$5)/log(2), log(prev6/$6)/log(2), log(prev7/$7)/log(2)} {prev4=$4; prev5=$5; prev6=$6; prev7=$7}' "${SUMMARY}" >> "${ORDER}"
    cat "${ORDER}"
done

# Exit the run directory
cd ..

echo; echo; echo "Done"; echo; echo
