#!/bin/bash

# Source tutorial run functions
. $WM_PROJECT_DIR/bin/tools/RunFunctions

# Source solids4Foam scripts
source solids4FoamScripts.sh

# Load user variables
echo "Sourcing the USER_VARIABLE_NAMES file"
source USER_VARIABLE_NAMES

if [[ -d "${CASE_NAME}.1.${MACHINE}.${SETTINGS}" ]]
then
    echo "Case ${CASE_NAME}.1.${MACHINE}.${SETTINGS} already exists: please remove it"; echo
    exit 1;
fi

# Run cases
for i in `seq 1 8`;
do
    CASE="${CASE_NAME}.$i.${MACHINE}.${SETTINGS}"
    echo "Running ${CASE}"

    # Copy template case
    cp -r "${BASE}" "${CASE}"

    # Enter the case
    cd "${CASE}"

    if [ "$USE_GMSH" -eq 1 ]
    then
        # Replace the meshSpacing file
        if [[ ! -f "meshes/meshSpacing$i.geo" ]]
        then
            echo "Cannot find ${CASE}/meshes/meshSpacing$i.geo: please add it to ${BASE}/meshes/"; echo
            exit 1;
        else
            echo "Copying ${CASE}/meshes/meshSpacing$i.geo to ${CASE}/meshes/meshSpacing.geo"
            \cp "meshes/meshSpacing$i.geo" meshes/meshSpacing.geo
        fi

        # Create the mesh
        if command -v gmsh &> /dev/null
        then
            # Remporarily rename 0 to avoid issues
            mv 0 0.tmp

            # Create mesh with gmsh
    	    solids4Foam::runApplication gmsh -3 -format msh2 meshes/cooksMembrane.geo
            solids4Foam::runApplication gmshToFoam meshes/cooksMembrane.msh
            if [ "$USE_POLYDUALMESH" -eq 1 ]
            then
                solids4Foam::runApplication polyDualMesh 30 -overwrite
                solids4Foam::runApplication combinePatchFaces 45 -overwrite
            fi
	    solids4Foam::runApplication changeDictionary

            # Move 0 back
            mv 0.tmp 0
        else
            echo; echo "Gmsh is required to run this case: please install it"
            exit 1
        fi
    else
        # Replace the blockMeshDict
        if [[ ! -f "system/blockMeshDict.$i" ]]
        then
            echo "Cannot find ${CASE}/system/blockMeshDict.$i: please add it to ${BASE}/meshes/"; echo
            exit 1;
        else
            echo "Copying ${CASE}/system/blockMeshDict.$i to ${CASE}/system/blockMeshDict"
            \cp "system/blockMeshDict.$i" system/blockMeshDict
            # To avoid using it in hex.segregated case which is in fe format
            rm -f constant/polyMesh/blockMeshDict
        fi

        # Create the mesh
        solids4Foam::runApplication blockMesh
    fi

    # Run the solver
    # If "gtime" is available (/usr/bin/time on Linux), use it to
    # record the max memory usage. On linux gtime is set to be alias for /usr/bin/time
    if [ -f /usr/bin/time ] || command -v gtime &> /dev/null
    then
        echo "Running solids4Foam on ${CASE} and recording the memory usage"
        if [ -x /opt/homebrew/bin/gtime ]; then
            gtime -f "Maximum resident set size (kbytes): %M" mpirun -np 1 solids4Foam &> log.solids4Foam
        else
            /usr/bin/time -f "Maximum resident set size (kbytes): %M" mpirun -np 1 solids4Foam &> log.solids4Foam
        fi
    else
        echo "Running solids4Foam on ${CASE}"
        #solids4Foam::runApplication solids4Foam
        # Strange PETSc issue on Macbook where I need to use mpirun for serial
        mpirun -np 1 solids4Foam &> log.solids4Foam
    fi

    # Navigate back to the parent directory
    cd ..
done

echo; echo "Done"; echo

echo "Run ./AllpostMeshStudy to extract the results"; echo
