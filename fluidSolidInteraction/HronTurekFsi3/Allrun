#!/bin/bash

# Source required functions
. $WM_PROJECT_DIR/bin/tools/RunFunctions
source solids4FoamScripts.sh

# Define configurations as space-separated strings
configs=(
    "BASE=base/hex.snes NAME=hex.lu PETSC_FILE=petscOptions.lu"
    "BASE=base/hex.segregated NAME=hex.seg"
)
# SNES segregated approach
#    "BASE=base/snes NAME=hex.seg.lu PETSC_FILE=petscOptions.seg.lu"

# Define start and end mesh indices
# Mesh input files are defined from 1 to 3
START_MESH=1
END_MESH=3


# Detect the CPU type: we append this to the case name
if [[ "$OSTYPE" == "darwin"* ]]
then
    # macOS
    CPU_TYPE=$(sysctl -n machdep.cpu.brand_string | sed 's/[^a-zA-Z0-9]/_/g')
elif [[ -f /proc/cpuinfo ]]
then
    # Linux
    CPU_TYPE=$(grep -m 1 "model name" /proc/cpuinfo | awk -F': ' '{print $2}' | sed 's/[^a-zA-Z0-9]/_/g')
else
    # Fallback if neither method works
    CPU_TYPE="Unknown_CPU"
fi


# Create timestamped working directory for this run
DATE=$(date +%Y%m%d_%H%M%S)
RUN_DIR="run_${CPU_TYPE}_${DATE}"
echo "Creating ${RUN_DIR}"
mkdir "${RUN_DIR}"

# Enter the run directory
cd "${RUN_DIR}"

# Iterate through configurations
for config in "${configs[@]}"
do
    # Parse the configuration string
    eval $config
    echo; echo "***************************************"
    echo "Running configuration: $config"
    echo "***************************************"

    # Define results summary file name
    SUMMARY="${NAME}.summary.txt"
    echo "# Mesh Time Mem" > "${SUMMARY}"

    # Loop over mesh densities in each configuration
    for i in `seq $START_MESH $END_MESH`
    do
        CASE="${NAME}.$i"
        echo; echo "Processing case: $CASE"

        # Prepare the case
        cp -r "../${BASE}" "${CASE}"
        cd "$CASE"

        # Replace the fluid/blockMeshDict
        if [[ ! -f "system/fluid/blockMeshDict.$i" ]]
        then
            echo "Cannot find ${CASE}/system/fluid/blockMeshDict.$i: please add it to ${BASE}/meshes/"; echo
            exit 1;
        else
            echo "Copying ${CASE}/system/fluid/blockMeshDict.$i to ${CASE}/system/fluid/blockMeshDict"
            \cp "system/fluid/blockMeshDict.$i" system/fluid/blockMeshDict
        fi

        # Replace the solid/blockMeshDict
        if [[ ! -f "system/solid/blockMeshDict.$i" ]]
        then
            echo "Cannot find ${CASE}/system/solid/blockMeshDict.$i: please add it to ${BASE}/meshes/"; echo
            exit 1;
        else
            echo "Copying ${CASE}/system/solid/blockMeshDict.$i to ${CASE}/system/solid/blockMeshDict"
            \cp "system/solid/blockMeshDict.$i" system/solid/blockMeshDict
        fi

        # Create the mesh
        solids4Foam::runApplication -s fluid blockMesh -region fluid
        solids4Foam::runApplication -s solid blockMesh -region solid

        # Update the PETSc options file
        if [ -n "${PETSC_FILE}" ]; then
            sed -i "/^\s*optionsFile /s|^.*|    optionsFile ${PETSC_FILE};|" constant/solid/solidProperties
        fi

        # Run the solver
        # If "gtime" is available (could be called "time" on Linux), use it to
        # record the max memory usage
        if command -v gtime &> /dev/null
        then
            echo "Running solids4Foam on ${CASE} with gtime"
            gtime -f "Maximum resident set size (kbytes): %M" mpirun -np 1 solids4Foam &> log.solids4Foam
        elif command -v time &> /dev/null
        then
            echo "Running solids4Foam on ${CASE} with time"
            gtime -f "Maximum resident set size (kbytes): %M" mpirun -np 1 solids4Foam &> log.solids4Foam
        else
            echo "Running solids4Foam on ${CASE}"
            # Strange PETSc issue on Macbook where I need to use mpirun for serial
            #solids4Foam::runApplication solids4Foam
            mpirun -np 1 solids4Foam &> log.solids4Foam
        fi

        # Extract results from solver log and append them to a summary file
        echo; echo "Appending results to ${SUMMARY}"
        if grep -q "Maximum resident" log.solids4Foam; then
            MAX_MEMORY=$(grep "Maximum resident" log.solids4Foam | awk '{print int($6 / 1000)}')
        else
            MAX_MEMORY="NaN"
        fi

        # Record the time
        CLOCK_TIME=$(grep "ClockTime" log.solids4Foam | tail -n 1 | awk '{print $7}')

        # Write data to file
        echo "$i $CLOCK_TIME $MAX_MEMORY" >> ../"${SUMMARY}"

        # Run extractMinMaxDispLastCycle.sh
        echo "Running extractMinMaxDispLastCycle.sh"
        ./extractMinMaxDispLastCycle.sh &> log.extractMinMaxDispLastCycle.sh

        # Write extractMinMaxDispLastCycle.sh results to file
        file="log.extractMinMaxDispLastCycle.sh"

        # Extract Dx values
        min_dx=$(grep "Min Dx" $file | awk '{print $3}')
        max_dx=$(grep "Max Dx" $file | awk '{print $3}')
        mean_dx=$(grep "Mean:" $file | head -n 1 | awk '{print $2}')
        freq_dx=$(grep "Frequency:" $file | head -n 1 | awk '{print $6}')

        # Calculate Dx amplitude
        amp_dx=$(echo "0.5*($max_dx - $min_dx)" | bc)

        # Extract Dy values
        min_dy=$(grep "Min Dy" $file | awk '{print $3}')
        max_dy=$(grep "Max Dy" $file | awk '{print $3}')
        mean_dy=$(grep "Mean:" $file | tail -n 1 | awk '{print $2}')
        freq_dy=$(grep "Frequency:" $file | tail -n 1 | awk '{print $6}')

        # Calculate Dy amplitude
        amp_dy=$(echo "0.5*($max_dy - $min_dy)" | bc)

        # Convert values to mm
        min_dx=$(echo "$min_dx * 1000" | bc)
        max_dx=$(echo "$max_dx * 1000" | bc)
        mean_dx=$(echo "$mean_dx * 1000" | bc)
        amp_dx=$(echo "$amp_dx * 1000" | bc)
        min_dy=$(echo "$min_dy * 1000" | bc)
        max_dy=$(echo "$max_dy * 1000" | bc)
        mean_dy=$(echo "$mean_dy * 1000" | bc)
        amp_dy=$(echo "$amp_dy * 1000" | bc)

        # Lookup the number of cells
        nCellsSolid=$(checkMesh -region solid -time 0 | \grep "cells:" | awk '{print $2}')
        nCellsFluid=$(checkMesh -region fluid -time 0 | \grep "cells:" | awk '{print $2}')

        # Output LaTeX table row
        row="$i (\$${nCellsFluid}$ + \$${nCellsSolid}$)  & \$$(printf "%.2f" $mean_dx) \pm $(printf "%.2f" $amp_dx) \,[ $(printf "%.2f" $freq_dx) ]\$ & \$$(printf "%.2f" $mean_dy) \pm $(printf "%.2f" $amp_dy) \,[ $(printf "%.2f" $freq_dy) ]\$ \\\\"

        # Output the LaTeX row
        echo "$row" >> ../tableHronTurekDisp.tex

        cd ..
    done

    # Add hline to tableHronTurekDisp.tex
    echo "\hline" >> tableHronTurekDisp.tex

    # Print summary file
    echo; echo "${SUMMARY} file:"; cat "${SUMMARY}"; echo
done

## Create plots if gnuplot in installed
#if command -v gnuplot &>/dev/null
#then
#    # Copy gnuplot scripts
#    cp ../plotScripts/* .
#
#    # Run all scripts
#    for f in *gnuplot
#    do
#        echo "Running gnuplot on $f"
#        gnuplot "$f"
#    done
#fi

# Extract comparison of JFNK and segregated for the hex meshes
if [[ -f hex.lu.summary.txt && -f hex.seg.summary.txt ]]
then
    # Define input files
    FILE1="hex.lu.summary.txt"
    FILE2="hex.seg.summary.txt"
    OUTPUT="tableJFNKvsSeg_HronTurek.tex"

    # Define mesh sizes for the rows in the table
    MESH_SIZES=("\$1\,252\$ + 156" "\$5\,008\$ + 624" "\$20\,032\$ + \$2\,496\$")

    # Extract columns and write to the output file
    {
        for i in $(seq 1 $((${#MESH_SIZES[@]}))); do
            # Extract columns 2 and 3 from each file
            F1C2=$(awk "NR==$((i + 1)) {print \$2}" "$FILE1")
            F1C3=$(awk "NR==$((i + 1)) {print \$3}" "$FILE1")
            F2C2=$(awk "NR==$((i + 1)) {print \$2}" "$FILE2")
            F2C3=$(awk "NR==$((i + 1)) {print \$3}" "$FILE2")

            if [[ i -eq 1 ]]
            then
                echo -e "\t\\\textbf{FSI}\t& ${MESH_SIZES[i-1]}\t& $F1C2 & $F1C3 & $F2C2 & $F2C3 \\\\\\"
            elif [[ i -eq 2 ]]
            then
                echo -e "\t\\emph{2-D, dynamic,}\t& ${MESH_SIZES[i-1]}\t& $F1C2 & $F1C3 & $F2C2 & $F2C3 \\\\\\"
            elif [[ i -eq 3 ]]
            then
                echo -e "\t\\emph{hyperelastic}\t& ${MESH_SIZES[i-1]}\t& $F1C2 & $F1C3 & $F2C2 & $F2C3 \\\\\\"
            else
                echo -e "\t\t\t\t& ${MESH_SIZES[i-1]}\t& $F1C2 & $F1C3 & $F2C2 & $F2C3 \\\\\\"
            fi
        done
    } > "$OUTPUT"

    echo -e "\hline" >> "$OUTPUT"

    echo; echo "Table generated in $OUTPUT"
fi

# Exit the run directory
cd ..

echo; echo; echo "Done!"; echo
echo "View the PDF files in ${RUN_DIR}"
echo; echo "Completed at" $(date +%Y%m%d_%H%M%S)
echo; echo
