/*--------------------------------*- C++ -*----------------------------------*\
| solids4foam: solid mechanics and fluid-solid interaction simulations        |
| Version:     v2.0                                                           |
| Web:         https://solids4foam.github.io                                  |
| Disclaimer:  This offering is not approved or endorsed by OpenCFD Limited,  |
|              producer and distributor of the OpenFOAM software via          |
|              www.openfoam.com, and owner of the OPENFOAM® and OpenCFD®      |
|              trade marks.                                                   |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    location    "constant";
    object      solidProperties;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

//solidModel     linearGeometryTotalDisplacement;
solidModel     nonLinearGeometryTotalLagrangianTotalDisplacement;

"linearGeometryTotalDisplacementCoeffs|nonLinearGeometryTotalLagrangianTotalDisplacementCoeffs"
{
    // Solution algorithm
    //solutionAlgorithm implicitSegregated;
    solutionAlgorithm PETScSNES;
    //solutionAlgorithm explicit;

    // Damping is useful (and often required) for stabilising explicit
    // simulations
    //dampingCoeff    [ 0 0 -1 0 0 0 0 ] 1e4;

    // PETSc options file used by PETScSNES
    optionsFile petscOptions.snes;

    // Optional: continue on PETSc SNES error
    // Useful for debugging
    //stopOnPetscError no;

    // Predictor D at the start of a new time step using U and A
    predictor yes;

    // Maximum number of momentum correctors
    nCorrectors     10;

    // Solution tolerance for displacement
    solutionTolerance 1e-3;
    // Alternative solution tolerance for displacement
    alternativeTolerance 1e-3;

    // Material law solution tolerance
    //materialTolerance 1e-05;

    // Write frequency for the residuals
    infoFrequency   10;

    stabilisation
    {
        type        RhieChow;
        //type        alpha;
        scaleFactor 0.5;
    }
}

// ************************************************************************* //
